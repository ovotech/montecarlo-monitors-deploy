name: "Monte Carlo Apply Monitors"
description: "Apply montecarlo monitors"
branding:
  icon: 'arrow-up-circle'
  color: 'green'
inputs:
  MCD_DEFAULT_API_ID:
    description: '[Secret] MonteCarlo token ID'
    required: true
  MCD_DEFAULT_API_TOKEN:
    description: '[Secret] MonteCarlo API token'
    required: true
  MONITORS_FOLDER:
    description: 'Top level folder containing monitors, within which is folders for each namespace'
    default: 'monitors'
  DRY_RUN:
    description: '(true / false) Whether to run as dry run or deploy the monitors (normally on main branch only)'
    default: 'false'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: MonteCarlo install
      shell: bash
      run: pip install -U -q montecarlodata

    - name: MonteCarlo configure
      shell: bash
      env:
        MCD_DEFAULT_API_ID: ${{ inputs.MCD_DEFAULT_API_ID }}
        MCD_DEFAULT_API_TOKEN: ${{ inputs.MCD_DEFAULT_API_TOKEN }}
      run: montecarlo configure --mcd-id $MCD_DEFAULT_API_ID --mcd-token $MCD_DEFAULT_API_TOKEN 

    - name: MonteCarlo deploy
      shell: bash
      env:
        MONITORS_FOLDER: ${{ inputs.MONITORS_FOLDER }}
        DRY_RUN: ${{ inputs.DRY_RUN }}
      run: |
        for dir in $MONITORS_FOLDER/* ; do
        if $DRY_RUN
        then
          echo "Dry run of monitors in $dir"
          pushd ./$dir
          montecarlo monitors apply --dry-run
          popd
        else
          echo "Applying monitors in $dir"
          pushd ./$dir
          montecarlo monitors apply --auto-yes
          popd
        fi
        done || {
          echo "Error applying monitors in $dir"
          exit 1
        }
